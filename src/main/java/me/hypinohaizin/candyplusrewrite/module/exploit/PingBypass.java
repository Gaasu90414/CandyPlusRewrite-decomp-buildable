//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\gaasu\Downloads\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

package me.hypinohaizin.candyplusrewrite.module.exploit;

import java.util.ArrayList;
import java.util.Iterator;
import me.hypinohaizin.candyplusrewrite.event.events.network.PacketEvent;
import me.hypinohaizin.candyplusrewrite.module.Module;
import me.hypinohaizin.candyplusrewrite.setting.Setting;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.init.SoundEvents;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketUpdateSign;
import net.minecraft.network.play.server.SPacketSoundEffect;
import net.minecraft.network.status.client.CPacketPing;
import net.minecraft.util.SoundCategory;
import net.minecraftforge.fml.common.eventhandler.EventPriority;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;

public class PingBypass extends Module {
   public Setting<Boolean> ping = this.register(new Setting("Ping", true));
   public Setting<Boolean> animation = this.register(new Setting("Animation", true));
   public Setting<Boolean> sign = this.register(new Setting("Sign", true));
   public Setting<Boolean> crystal = this.register(new Setting("Crystal", true));
   public Setting<Boolean> remove = this.register(new Setting("Remove", true, (v) -> {
      return (Boolean)this.crystal.getValue();
   }));

   public PingBypass() {
      super("PingBypass", Module.Categories.EXPLOIT, false, false);
   }

   @SubscribeEvent(
      priority = EventPriority.HIGH
   )
   public void onPacketSend(PacketEvent.Send event) {
      if (this.isEnable) {
         Packet packet = event.getPacket();
         if (packet instanceof CPacketPing && (Boolean)this.ping.getValue()) {
            event.cancel();
         }

         if (packet instanceof CPacketAnimation && (Boolean)this.animation.getValue()) {
            event.cancel();
         }

         if (packet instanceof CPacketUpdateSign && (Boolean)this.sign.getValue()) {
            event.cancel();
         }

      }
   }

   @SubscribeEvent(
      priority = EventPriority.HIGH
   )
   public void onPacketReceive(PacketEvent.Receive event) {
      if (this.isEnable) {
         if ((Boolean)this.crystal.getValue() && event.getPacket() instanceof SPacketSoundEffect && ((SPacketSoundEffect)event.getPacket()).getCategory() == SoundCategory.BLOCKS && ((SPacketSoundEffect)event.getPacket()).getSound() == SoundEvents.ENTITY_GENERIC_EXPLODE) {
            Iterator var2 = (new ArrayList(mc.world.loadedEntityList)).iterator();

            while(var2.hasNext()) {
               Entity crystal = (Entity)var2.next();
               if (crystal instanceof EntityEnderCrystal) {
                  if ((Boolean)this.remove.getValue()) {
                     mc.world.removeEntityFromWorld(crystal.getEntityId());
                  } else {
                     crystal.setDead();
                  }
               }
            }
         }

      }
   }
}
