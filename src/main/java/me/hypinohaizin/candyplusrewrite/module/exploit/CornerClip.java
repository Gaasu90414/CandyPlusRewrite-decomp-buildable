//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\gaasu\Downloads\Minecraft-Deobfuscator3000-master\1.12 stable mappings"!

package me.hypinohaizin.candyplusrewrite.module.exploit;

import me.hypinohaizin.candyplusrewrite.module.Module;
import me.hypinohaizin.candyplusrewrite.setting.Setting;
import me.hypinohaizin.candyplusrewrite.utils.Timer;
import net.minecraft.network.play.client.CPacketPlayer.Position;
import net.minecraft.util.math.MathHelper;

public class CornerClip extends Module {
   public Setting<Boolean> autoDisable = this.register(new Setting("AutoDisable", false));
   public Setting<Float> disableAfter = this.register(new Setting("DisableAfter", 1.0F, 5.0F, 0.1F, (v) -> {
      return (Boolean)this.autoDisable.getValue();
   }));
   private final Timer timer = new Timer();

   public CornerClip() {
      super("CornerClip", Module.Categories.EXPLOIT, false, false);
   }

   public double roundToClosest(double num, double low, double high) {
      double d2 = high - num;
      double d1 = num - low;
      return d2 > d1 ? low : high;
   }

   public boolean isMoving() {
      return mc.gameSettings.keyBindForward.isKeyDown() || mc.gameSettings.keyBindBack.isKeyDown() || mc.gameSettings.keyBindLeft.isKeyDown() || mc.gameSettings.keyBindRight.isKeyDown();
   }

   public void onEnable() {
      this.timer.reset();
   }

   public void onUpdate() {
      if (!this.nullCheck() && !this.isMoving()) {
         if ((Boolean)this.autoDisable.getValue() && this.timer.passedMs((long)((Float)this.disableAfter.getValue() * 1000.0F))) {
            this.disable();
         } else {
            if (mc.world.getCollisionBoxes(mc.player, mc.player.getEntityBoundingBox().grow(0.01D, 0.0D, 0.01D)).size() < 2) {
               mc.player.setPosition(this.roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.301D, Math.floor(mc.player.posX) + 0.699D), mc.player.posY, this.roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.301D, Math.floor(mc.player.posZ) + 0.699D));
            } else if (mc.player.ticksExisted % 5 == 0) {
               mc.player.setPosition(mc.player.posX + MathHelper.clamp(this.roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.241D, Math.floor(mc.player.posX) + 0.759D) - mc.player.posX, -0.03D, 0.03D), mc.player.posY, mc.player.posZ + MathHelper.clamp(this.roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.241D, Math.floor(mc.player.posZ) + 0.759D) - mc.player.posZ, -0.03D, 0.03D));
               mc.player.connection.sendPacket(new Position(mc.player.posX, mc.player.posY, mc.player.posZ, true));
               mc.player.connection.sendPacket(new Position(this.roundToClosest(mc.player.posX, Math.floor(mc.player.posX) + 0.23D, Math.floor(mc.player.posX) + 0.77D), mc.player.posY, this.roundToClosest(mc.player.posZ, Math.floor(mc.player.posZ) + 0.23D, Math.floor(mc.player.posZ) + 0.77D), true));
            }

         }
      }
   }
}
