package me.hypinohaizin.candyplusrewrite.module.exploit;

import me.hypinohaizin.candyplusrewrite.event.events.network.PacketEvent;
import me.hypinohaizin.candyplusrewrite.module.Module;
import me.hypinohaizin.candyplusrewrite.setting.Setting;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.CPacketChatMessage;
import net.minecraft.network.play.client.CPacketConfirmTeleport;
import net.minecraft.network.play.client.CPacketConfirmTransaction;
import net.minecraft.network.play.client.CPacketEntityAction;
import net.minecraft.network.play.client.CPacketInput;
import net.minecraft.network.play.client.CPacketKeepAlive;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerAbilities;
import net.minecraft.network.play.client.CPacketPlayerDigging;
import net.minecraft.network.play.client.CPacketPlayerTryUseItem;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.client.CPacketVehicleMove;
import net.minecraft.network.play.client.CPacketPlayer.Position;
import net.minecraft.network.play.client.CPacketPlayer.PositionRotation;
import net.minecraft.network.play.client.CPacketPlayer.Rotation;

public class PacketCanceller extends Module {
   public Setting<Boolean> confirmTeleport = this.register(new Setting("ConfirmTeleport", true));
   public Setting<Boolean> chatMessage = this.register(new Setting("ChatMessage", true));
   public Setting<Boolean> confirmTransaction = this.register(new Setting("ConfirmTransaction", true));
   public Setting<Boolean> useEntity = this.register(new Setting("UseEntity", true));
   public Setting<Boolean> keepAlive = this.register(new Setting("KeepAlive", true));
   public Setting<Boolean> player = this.register(new Setting("Player", true));
   public Setting<Boolean> vehicleMove = this.register(new Setting("VehicleMove", true));
   public Setting<Boolean> playerAbilities = this.register(new Setting("PlayerAbilities", true));
   public Setting<Boolean> playerDigging = this.register(new Setting("PlayerDigging", true));
   public Setting<Boolean> entityAction = this.register(new Setting("EntityAction", true));
   public Setting<Boolean> input = this.register(new Setting("Input", true));
   public Setting<Boolean> tryUseItemOnBlock = this.register(new Setting("TryUseItemOnBlock", true));
   public Setting<Boolean> tryUseItem = this.register(new Setting("TryUseItem", true));

   public PacketCanceller() {
      super("PacketCanceller", Module.Categories.EXPLOIT, false, false);
   }

   public void onPacketSend(PacketEvent.Send event) {
      Packet<?> packet = event.getPacket();
      if (packet instanceof CPacketConfirmTeleport && (Boolean)this.confirmTeleport.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketChatMessage && (Boolean)this.chatMessage.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketConfirmTransaction && (Boolean)this.confirmTransaction.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketUseEntity && (Boolean)this.useEntity.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketKeepAlive && (Boolean)this.keepAlive.getValue()) {
         event.cancel();
      }

      if ((packet instanceof CPacketPlayer || packet instanceof Position || packet instanceof PositionRotation || packet instanceof Rotation) && (Boolean)this.player.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketVehicleMove && (Boolean)this.vehicleMove.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketPlayerAbilities && (Boolean)this.playerAbilities.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketPlayerDigging && (Boolean)this.playerDigging.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketEntityAction && (Boolean)this.entityAction.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketInput && (Boolean)this.input.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketPlayerTryUseItemOnBlock && (Boolean)this.tryUseItemOnBlock.getValue()) {
         event.cancel();
      }

      if (packet instanceof CPacketPlayerTryUseItem && (Boolean)this.tryUseItem.getValue()) {
         event.cancel();
      }

   }
}
